#ifndef FUNERAL_INCLUDED
#define FUNERAL_INCLUDED

class Funeral {
public:
  unsigned int numEv = 464;
  unsigned long evTime[464] = {0,0,0,924,924,924,1024,1024,1024,1716,1792,1948,1948,2024,2048,2048,2048,2972,2972,3072,3072,3896,3996,3996,4096,4096,4096,5020,5020,5020,5120,5120,5120,5812,5888,6044,6044,6120,6144,6144,6144,7068,7068,7168,7168,7992,8092,8092,8192,8192,8192,9116,9116,9116,9216,9216,9216,9908,9984,10140,10140,10216,10240,10240,10240,11164,11164,11164,11264,11264,11264,11956,12032,12188,12188,12264,12288,12288,12288,12356,12356,13052,13056,13212,13212,13288,13312,13312,13312,14004,14080,14236,14236,14312,14336,14336,14336,15260,15260,15360,15360,16184,16284,16284,16384,16384,16384,16384,17308,17308,17308,17308,17408,17408,17408,17408,18100,18100,18176,18176,18332,18332,18408,18408,18432,18432,18432,18432,19356,19356,19356,19356,19456,19456,19456,19456,20148,20148,20224,20224,20380,20380,20456,20456,20480,20480,20480,20480,21172,21172,21248,21248,21404,21404,21480,21480,21504,21504,21504,21504,22196,22196,22272,22272,22428,22428,22504,22504,22528,22528,22528,22528,23452,23452,23552,23552,24376,24376,24476,24476,24576,24576,24576,24576,25084,25088,25500,25500,25596,25600,25600,25600,26364,26368,26524,26524,26604,26624,26624,26624,26624,26624,27548,27548,27648,27648,28572,28572,28652,28652,28672,28672,28672,28672,29180,29184,29596,29596,29692,29696,29696,29696,30460,30464,30620,30620,30700,30720,30720,30720,30720,30720,31644,31644,31744,31744,32668,32668,32748,32748,32768,32768,32768,33692,33692,33692,33792,33792,33792,34484,34560,34716,34716,34792,34816,34816,34816,35740,35740,35740,35840,35840,35840,36532,36608,36764,36764,36840,36864,36864,36864,36932,36932,37628,37632,37788,37788,37864,37888,37888,37888,38580,38656,38812,38812,38888,38912,38912,38912,39836,39836,39936,39936,40760,40860,40860,40960,40960,40960,40960,41468,41472,41884,41884,41980,41984,41984,41984,42748,42752,42908,42908,42988,43008,43008,43008,43008,43008,43932,43932,44032,44032,44956,44956,45036,45036,45056,45056,45056,45056,45564,45568,45980,45980,46076,46080,46080,46080,46844,46848,47004,47004,47084,47104,47104,47104,47104,47104,48028,48028,48128,48128,49052,49052,49132,49132,49152,49152,49152,50076,50076,50076,50176,50176,50176,50868,50944,51100,51100,51176,51200,51200,51200,52124,52124,52124,52224,52224,52224,52916,52992,53148,53148,53224,53248,53248,53248,53316,53316,54012,54016,54172,54172,54248,54272,54272,54272,54964,55040,55196,55196,55272,55296,55296,55296,56220,56220,56320,56320,57144,57244,57244,57344,57344,57344,58268,58268,58268,58368,58368,58368,59060,59136,59292,59292,59368,59392,59392,59392,60316,60316,60316,60416,60416,60416,61108,61184,61340,61340,61416,61440,61440,61440,61508,61508,62204,62208,62364,62364,62440,62464,62464,62464,63156,63232,63388,63388,63464,63488,63488,63488,65336,65336,65336};
  unsigned char evNotes[464] = {57,45,52,0,0,0,57,48,53,0,57,0,0,0,57,45,52,0,0,48,53,0,0,0,57,45,52,0,0,0,57,48,53,0,57,0,0,0,57,45,52,0,0,48,53,0,0,0,57,45,52,0,0,0,57,48,53,0,57,0,0,0,57,45,52,0,0,0,60,48,53,0,59,0,0,0,60,45,52,0,59,0,57,0,0,0,57,48,53,0,57,0,0,0,57,45,52,0,0,48,53,0,0,0,57,60,45,52,0,0,0,0,57,60,48,53,0,0,57,60,0,0,0,0,57,60,45,52,0,0,0,0,60,64,48,53,0,0,59,62,0,0,0,0,59,62,45,52,0,0,57,60,0,0,0,0,57,60,48,53,0,0,57,60,0,0,0,0,57,60,45,52,0,0,48,53,0,0,0,0,69,60,45,52,0,67,0,0,0,65,48,53,0,64,0,0,0,0,64,60,45,52,0,0,48,53,0,0,0,0,69,60,45,52,0,67,0,0,0,65,48,53,0,64,0,0,0,0,64,60,45,52,0,0,48,53,0,0,0,0,57,45,52,0,0,0,57,48,53,0,57,0,0,0,57,45,52,0,0,0,60,48,53,0,59,0,0,0,60,45,52,0,59,0,57,0,0,0,57,48,53,0,57,0,0,0,57,45,52,0,0,48,53,0,0,0,81,72,45,52,0,79,0,0,0,77,48,53,0,76,0,0,0,0,76,72,45,52,0,0,48,53,0,0,0,0,81,72,45,52,0,79,0,0,0,77,48,53,0,76,0,0,0,0,76,72,45,52,0,0,48,53,0,0,0,0,69,45,52,0,0,0,69,48,53,0,69,0,0,0,69,45,52,0,0,0,72,48,53,0,71,0,0,0,72,45,52,0,71,0,69,0,0,0,69,48,53,0,69,0,0,0,69,45,52,0,0,48,53,0,0,0,57,45,52,0,0,0,57,48,53,0,57,0,0,0,57,45,52,0,0,0,60,48,53,0,59,0,0,0,60,45,52,0,59,0,57,0,0,0,57,48,53,0,57,0,0,0,57,45,52,0,0,0};
  unsigned char evChannels[464] = {0,1,2,0,1,2,0,1,2,0,0,1,2,0,0,1,2,1,2,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,0,1,2,0,0,1,2,1,2,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,0,1,2,0,0,1,2,0,1,2,0,1,2,0,0,1,2,0,0,1,2,0,0,0,0,1,2,0,0,1,2,0,0,1,2,0,0,1,2,1,2,1,2,0,1,2,0,1,2,3,0,1,2,3,0,1,2,3,0,1,0,1,2,3,0,1,0,1,2,3,0,1,2,3,0,1,2,3,0,1,0,1,2,3,0,1,0,1,2,3,0,1,0,1,2,3,0,1,0,1,2,3,0,1,0,1,2,3,0,1,0,1,2,3,2,3,2,3,0,1,2,3,0,1,2,3,0,0,2,3,0,0,2,3,0,0,2,3,1,0,0,1,2,3,2,3,2,3,2,3,0,1,0,1,2,3,0,0,2,3,0,0,2,3,0,0,2,3,1,0,0,1,2,3,2,3,2,3,2,3,0,1,0,1,2,0,1,2,0,1,2,0,0,1,2,0,0,1,2,0,1,2,0,1,2,0,0,1,2,0,0,1,2,0,0,0,0,1,2,0,0,1,2,0,0,1,2,0,0,1,2,1,2,1,2,0,1,2,0,1,2,3,0,0,2,3,0,0,2,3,0,0,2,3,1,0,0,1,2,3,2,3,2,3,2,3,0,1,0,1,2,3,0,0,2,3,0,0,2,3,0,0,2,3,1,0,0,1,2,3,2,3,2,3,2,3,0,1,0,1,2,0,1,2,0,1,2,0,0,1,2,0,0,1,2,0,1,2,0,1,2,0,0,1,2,0,0,1,2,0,0,0,0,1,2,0,0,1,2,0,0,1,2,0,0,1,2,1,2,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,0,1,2,0,0,1,2,0,1,2,0,1,2,0,0,1,2,0,0,1,2,0,0,0,0,1,2,0,0,1,2,0,0,1,2,0,0,1,2,0,1,2};

  int POLY = 4;
  int PIN = 26;

  unsigned long periods[128];

  void computePeriods() {
    periods[0]=0;
    for (int i=1; i<128; i++) {
      periods[i] = (unsigned long)(1000000.0/(440.0*pow(2,(i-69)/12.0)));
    }
  }

  void play() {
    const int PULSE = 30;
    unsigned long tnow = millis();
    unsigned long usnow = micros();
    unsigned long notes[POLY];
    unsigned long pulse[POLY];
    unsigned int evPtr = 0;
    for (int c=0; c<POLY; c++) {
      notes[c]=0;
    }
    while (evPtr<numEv) {
      // Wait for tone change event
      while (millis()-tnow < (unsigned long)(evTime[evPtr])) {
        // Make sound on Channels
        int val = 0;
        usnow=micros();
        for (int c=0; c<POLY; c++) {
          if (notes[c]!=0) {
            val += 60*(usnow % notes[c])/notes[c];
          }
        }
        if (val>255) {
          val=255;
        }
        dacWrite(PIN,val);
      }
      
      notes[evChannels[evPtr]] = periods[evNotes[evPtr]];
      pulse[evChannels[evPtr]] = micros();
      evPtr++;
    }
    digitalWrite(PIN, LOW);
  }

  void begin() {
    pinMode(PIN, OUTPUT);
    digitalWrite(PIN,LOW);
    computePeriods();
  }

};

#endif

